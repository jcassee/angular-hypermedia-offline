"use strict";angular.module("hypermedia-offline",["hypermedia","netstatus"]).factory("OfflineContext",["$http","$log","$q","$rootScope","ResourceContext","Netstatus",function(t,e,n,r,o,u){function c(t){o.call(this,t)}function i(){return n(function(t,e){return a.transaction("rw",a.requests,function(){var n;return a.requests.toArray(function(t){return n=t,a.requests.clear()}).then(function(){r.$apply(function(){f=0}),t(n)})["catch"](function(t){e(t)})})})}function s(r){var o=n.when();return r.forEach(function(e){o=o.then(function(){return t(e)})}),o=o["catch"](function(t){return e.error(t),n.reject(t)})}var a=new Dexie("offlinecache");a.version(1).stores({resources:"",requests:"++,[url+method]"}),a.on("error",function(t){e.error("OfflineContext: "+t),r.$broadcast("offlinecache:error",t)}),a.on("blocked",function(){e.warn("OfflineContext: database is blocked"),r.$broadcast("offlinecache:blocked")}),a.open();var f=null;return a.on("ready",function(){return a.requests.count(function(t){r.$apply(function(){f=t})})}),c.prototype=Object.create(o.prototype,{constructor:{value:c},httpGet:{value:function(t){var e=this;return u.offline?n(function(n,r){return a.resources.get(t.$uri).then(function(n){return n?(t.$update(n.data,n.links),o.prototype.markSynced.call(e,t,Date.now())):void 0}).then(function(){n(t)})["catch"](function(t){r(t)})}):o.prototype.httpGet.call(this,t)}},httpPut:{value:function(t){return u.offline?n(function(e,n){return a.transaction("rw",a.resources,a.requests,function(){a.requests.add(t.$putRequest()),a.resources.put({data:t,links:t.$links},t.$uri)}).then(function(){r.$apply(function(){f+=1}),e(t)})["catch"](function(t){n(t)})}):o.prototype.httpPut.call(this,t)}},httpDelete:{value:function(t){return u.offline?n(function(e,n){return a.transaction("rw",a.resources,a.requests,function(){a.requests.add(t.$deleteRequest()),a.resources["delete"](t.$uri)}).then(function(){r.$apply(function(){f+=1}),e(t)})["catch"](function(t){n(t)})}):o.prototype.httpDelete.call(this,t)}},httpPost:{value:function(t,e,c,i){return u.offline?n(function(n,o){return a.requests.add(t.$postRequest(e,c,i)).then(function(){r.$apply(function(){f+=1}),n(t)})["catch"](function(t){o(t)})}):o.prototype.httpPost.call(this,t,e,c,i)}},markSynced:{value:function(t,e){return t=angular.isArray(t)?t:[t],n(function(n,r){return a.transaction("rw",a.resources,function(){t.forEach(function(t){e?a.resources.put({data:t,links:t.$links},t.$uri):a.resources["delete"](t.$uri)}),n()})["catch"](function(t){r(t)})}).then(function(){return o.prototype.markSynced.call(this,t,e)})}}}),Object.defineProperties(c,{busyRequests:{get:function(){return o.busyRequests}},offlineRequests:{get:function(){return f}},getOfflinePosts:{value:function(t){return n(function(e,n){return a.requests.where("[url+method]").equals([t.$uri,"post"]).toArray().then(function(t){e(t)})["catch"](function(t){n(t)})})}},replayRequests:{value:s,writable:!0}}),r.$on("netstatus",function(t,e){return"online"===e?i().then(c.replayRequests):void 0}),c}]).controller("OfflineContextController",function(t,e){t.context=e});